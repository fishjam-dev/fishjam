---
components:
  responses: {}
  schemas:
    AuthToken:
      description: Token for authorizing websocket connection
      example: 5cdac726-57a3-4ecb-b1d5-72a3d62ec242
      title: AuthToken
      type: string
      x-struct: Elixir.JellyfishWeb.ApiSpec.Peer.Token
    Component:
      description: Describes component
      properties:
        id:
          description: Assigned component id
          example: component-1
          type: string
        type:
          $ref: '#/components/schemas/ComponentType'
      title: Component
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Component
    ComponentDetailsResponse:
      description: Response containing component details
      properties:
        data:
          $ref: '#/components/schemas/Component'
      required:
        - data
      title: ComponentDetailsResponse
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.ComponentDetailsResponse
    ComponentOptions:
      description: Component-specific options
      example:
        output_path: /hls-output
      title: ComponentOptions
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Component.Options
    ComponentType:
      description: Component type
      example: hls
      title: ComponentType
      type: string
      x-struct: Elixir.JellyfishWeb.ApiSpec.Component.Type
    Error:
      description: Error message
      properties:
        errors:
          description: Error details
          example: Token has expired
          type: string
      title: Error
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Error
    Peer:
      description: Describes peer status
      properties:
        id:
          description: Assigned peer id
          example: peer-1
          type: string
        status:
          $ref: '#/components/schemas/PeerStatus'
        token:
          $ref: '#/components/schemas/AuthToken'
        type:
          $ref: '#/components/schemas/PeerType'
      title: Peer
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Peer
    PeerDetailsResponse:
      description: Response containing peer details
      properties:
        data:
          $ref: '#/components/schemas/Peer'
      required:
        - data
      title: PeerDetailsResponse
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.PeerDetailsResponse
    PeerStatus:
      description: Informs about the peer status
      enum:
        - connected
        - disconnected
      example: disconnected
      title: PeerStatus
      type: string
      x-struct: Elixir.JellyfishWeb.ApiSpec.Peer.Status
    PeerType:
      description: Peer type
      example: webrtc
      title: PeerType
      type: string
      x-struct: Elixir.JellyfishWeb.ApiSpec.Peer.Type
    Room:
      description: Description of the room state
      properties:
        components:
          items:
            $ref: '#/components/schemas/Component'
          type: array
        config:
          $ref: '#/components/schemas/RoomConfig'
        id:
          description: Room ID
          example: room-1
          type: string
        peers:
          items:
            $ref: '#/components/schemas/Peer'
          type: array
      title: Room
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Room
    RoomConfig:
      description: Room configuration
      properties:
        maxPeers:
          description: Maximum amount of peers allowed into the room
          example: 10
          minimum: 1
          nullable: true
          type: integer
      title: RoomConfig
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Room.Config
    RoomDetailsResponse:
      description: Response containing room details
      properties:
        data:
          $ref: '#/components/schemas/Room'
      required:
        - data
      title: RoomDetailsResponse
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.RoomDetailsResponse
    RoomsListingResponse:
      description: Response containing list of all rooms
      properties:
        data:
          items:
            $ref: '#/components/schemas/Room'
          type: array
      required:
        - data
      title: RoomsListingResponse
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.RoomsListingResponse
info:
  title: Jellyfish Media Server
  version: 0.1.0
openapi: 3.0.0
paths:
  /room:
    get:
      callbacks: {}
      operationId: JellyfishWeb.RoomController.index
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomsListingResponse'
          description: Success
      summary: Show information about all rooms
      tags:
        - room
    post:
      callbacks: {}
      operationId: JellyfishWeb.RoomController.create
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomConfig'
        description: Room configuration
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDetailsResponse'
          description: Room successfully created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request structure
      summary: Creates a room
      tags:
        - room
  /room/{room_id}:
    delete:
      callbacks: {}
      operationId: JellyfishWeb.RoomController.delete
      parameters:
        - description: Room id
          in: path
          name: room_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted room
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Room doesn't exist
      summary: Delete the room
      tags:
        - room
    get:
      callbacks: {}
      operationId: JellyfishWeb.RoomController.show
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDetailsResponse'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Room doesn't exist
      summary: Shows information about the room
      tags:
        - room
  /room/{room_id}/component:
    post:
      callbacks: {}
      operationId: JellyfishWeb.ComponentController.create
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                options:
                  $ref: '#/components/schemas/ComponentOptions'
                type:
                  $ref: '#/components/schemas/ComponentType'
              required:
                - type
              type: object
        description: Component config
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentDetailsResponse'
          description: Successfully added component
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Room doesn't exist
      summary: Creates the component and adds it to the room
      tags:
        - component
  /room/{room_id}/component/{id}:
    delete:
      callbacks: {}
      operationId: JellyfishWeb.ComponentController.delete
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
        - description: Component ID
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Either component or the room doesn't exist
      summary: Delete the component from the room
      tags:
        - component
  /room/{room_id}/peer:
    post:
      callbacks: {}
      operationId: JellyfishWeb.PeerController.create
      parameters:
        - description: Room id
          in: path
          name: room_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                type:
                  $ref: '#/components/schemas/PeerType'
              required:
                - type
              type: object
        description: Peer specification
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeerDetailsResponse'
          description: Peer successfully created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request body structure
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Room doesn't exist
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Peer limit has been reached
      summary: Create peer
      tags:
        - peer
  /room/{room_id}/peer/{id}:
    delete:
      callbacks: {}
      operationId: JellyfishWeb.PeerController.delete
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
        - description: Peer id
          in: path
          name: peer_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Peer successfully deleted
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Room ID or Peer ID references a resource that doesn't exist
      summary: Delete peer
      tags:
        - peer
security: []
servers: []
tags: []
