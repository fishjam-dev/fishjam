# This file has been generated using OpenApiSpex. Do not edit manually!
# Run `mix api.spec` to regenerate

---
components:
  responses: {}
  schemas:
    AuthToken:
      description: Token for authorizing websocket connection
      example: 5cdac726-57a3-4ecb-b1d5-72a3d62ec242
      title: AuthToken
      type: string
      x-struct: Elixir.JellyfishWeb.ApiSpec.Peer.Token
    Component:
      description: Describes component
      discriminator:
        mapping:
          file: '#/components/schemas/ComponentFile'
          hls: '#/components/schemas/ComponentHLS'
          rtsp: '#/components/schemas/ComponentRTSP'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/ComponentHLS'
        - $ref: '#/components/schemas/ComponentRTSP'
        - $ref: '#/components/schemas/ComponentFile'
      title: Component
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Component
    ComponentDetailsResponse:
      description: Response containing component details
      properties:
        data:
          $ref: '#/components/schemas/Component'
      required:
        - data
      title: ComponentDetailsResponse
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.ComponentDetailsResponse
    ComponentFile:
      description: Describes the File component
      properties:
        id:
          description: Assigned component ID
          example: component-1
          type: string
        type:
          description: Component type
          example: file
          type: string
      required:
        - id
        - type
      title: ComponentFile
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Component.File
    ComponentHLS:
      description: Describes the HLS component
      properties:
        id:
          description: Assigned component ID
          example: component-1
          type: string
        properties:
          $ref: '#/components/schemas/ComponentPropertiesHLS'
        type:
          description: Component type
          example: hls
          type: string
      required:
        - id
        - type
        - properties
      title: ComponentHLS
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Component.HLS
    ComponentOptions:
      description: Component-specific options
      oneOf:
        - $ref: '#/components/schemas/ComponentOptionsHLS'
        - $ref: '#/components/schemas/ComponentOptionsRTSP'
        - $ref: '#/components/schemas/ComponentOptionsFile'
      title: ComponentOptions
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Component.Options
    ComponentOptionsFile:
      description: Options specific to the File component
      properties:
        filePath:
          description: Path to track file. Must be either OPUS encapsulated in Ogg or raw h264
          example: /root/video.h264
          type: string
      required:
        - filePath
      title: ComponentOptionsFile
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Component.File.Options
    ComponentOptionsHLS:
      description: Options specific to the HLS component
      properties:
        lowLatency:
          default: false
          description: Whether the component should use LL-HLS
          type: boolean
        persistent:
          default: false
          description: Whether the video is stored after end of stream
          type: boolean
        s3:
          description: Credentials to AWS S3 bucket.
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/S3Credentials'
          type: object
        subscribeMode:
          default: auto
          description: Whether the HLS component should subscribe to tracks automatically or manually.
          enum:
            - auto
            - manual
          type: string
        targetWindowDuration:
          description: Duration of stream available for viewer
          nullable: true
          type: integer
      title: ComponentOptionsHLS
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Component.HLS.Options
    ComponentOptionsRTSP:
      description: Options specific to the RTSP component
      properties:
        keepAliveInterval:
          default: 15000
          description: Interval (in ms) in which keep-alive RTSP messages will be sent to the remote stream source
          minimum: 0
          type: integer
        pierceNat:
          default: true
          description: Whether to attempt to create client-side NAT binding by sending an empty datagram from client to source, after the completion of RTSP setup
          type: boolean
        reconnectDelay:
          default: 15000
          description: Delay (in ms) between successive reconnect attempts
          minimum: 0
          type: integer
        rtpPort:
          default: 20000
          description: Local port RTP stream will be received at
          maximum: 65535
          minimum: 1
          type: integer
        sourceUri:
          description: URI of RTSP source stream
          example: rtsp://localhost:554/stream
          type: string
      required:
        - sourceUri
      title: ComponentOptionsRTSP
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Component.RTSP.Options
    ComponentPropertiesHLS:
      description: Properties specific to the HLS component
      properties:
        lowLatency:
          description: Whether the component uses LL-HLS
          type: boolean
        persistent:
          description: Whether the video is stored after end of stream
          type: boolean
        playable:
          description: Whether the generated HLS playlist is playable
          type: boolean
        subscribeMode:
          description: Whether the HLS component should subscribe to tracks automatically or manually
          enum:
            - auto
            - manual
          type: string
        targetWindowDuration:
          description: Duration of stream available for viewer
          nullable: true
          type: integer
      required:
        - playable
        - lowLatency
        - persistent
        - targetWindowDuration
        - subscribeMode
      title: ComponentPropertiesHLS
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Component.HLS.Properties
    ComponentPropertiesRTSP:
      description: Properties specific to the RTSP component
      properties: {}
      title: ComponentPropertiesRTSP
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Component.RTSP.Properties
    ComponentRTSP:
      description: Describes the RTSP component
      properties:
        id:
          description: Assigned component ID
          example: component-1
          type: string
        properties:
          $ref: '#/components/schemas/ComponentPropertiesRTSP'
        type:
          description: Component type
          example: hls
          type: string
      required:
        - id
        - type
        - properties
      title: ComponentRTSP
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Component.RTSP
    ComponentType:
      description: Component type
      example: hls
      title: ComponentType
      type: string
      x-struct: Elixir.JellyfishWeb.ApiSpec.Component.Type
    Error:
      description: Error message
      properties:
        errors:
          description: Error details
          example: Token has expired
          type: string
      required:
        - errors
      title: Error
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Error
    HlsMsn:
      description: Segment sequence number
      example: 10
      minimum: 0
      nullable: true
      title: HlsMsn
      type: integer
      x-struct: Elixir.JellyfishWeb.ApiSpec.HLS.Params.HlsMsn
    HlsPart:
      description: Partial segment sequence number
      example: 10
      minimum: 0
      nullable: true
      title: HlsPart
      type: integer
      x-struct: Elixir.JellyfishWeb.ApiSpec.HLS.Params.HlsPart
    HlsResponse:
      description: Requested file
      title: HlsResponse
      type: string
      x-struct: Elixir.JellyfishWeb.ApiSpec.HLS.Response
    HlsSkip:
      description: Set to "YES" if delta manifest should be requested
      example: YES
      nullable: true
      title: HlsSkip
      type: string
      x-struct: Elixir.JellyfishWeb.ApiSpec.HLS.Params.HlsSkip
    Peer:
      description: Describes peer status
      properties:
        id:
          description: Assigned peer id
          example: peer-1
          type: string
        status:
          $ref: '#/components/schemas/PeerStatus'
        type:
          $ref: '#/components/schemas/PeerType'
      required:
        - id
        - type
        - status
      title: Peer
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Peer
    PeerDetailsResponse:
      description: Response containing peer details and their token
      properties:
        data:
          properties:
            peer:
              $ref: '#/components/schemas/Peer'
            token:
              $ref: '#/components/schemas/AuthToken'
          required:
            - peer
            - token
          type: object
      required:
        - data
      title: PeerDetailsResponse
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.PeerDetailsResponse
    PeerOptions:
      description: Peer-specific options
      oneOf:
        - $ref: '#/components/schemas/PeerOptionsWebRTC'
      title: PeerOptions
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Peer.Options
    PeerOptionsWebRTC:
      description: Options specific to the WebRTC peer
      properties:
        enableSimulcast:
          default: true
          description: Enables the peer to use simulcast
          type: boolean
      title: PeerOptionsWebRTC
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Peer.WebRTC
    PeerStatus:
      description: Informs about the peer status
      enum:
        - connected
        - disconnected
      example: disconnected
      title: PeerStatus
      type: string
      x-struct: Elixir.JellyfishWeb.ApiSpec.Peer.Status
    PeerType:
      description: Peer type
      example: webrtc
      title: PeerType
      type: string
      x-struct: Elixir.JellyfishWeb.ApiSpec.Peer.Type
    RecordingListResponse:
      description: Response containing list of all recording
      properties:
        data:
          items:
            type: string
          type: array
      required:
        - data
      title: RecordingListResponse
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.RecordingListResponse
    Room:
      description: Description of the room state
      properties:
        components:
          description: List of all components
          items:
            $ref: '#/components/schemas/Component'
          type: array
        config:
          $ref: '#/components/schemas/RoomConfig'
        id:
          description: Room ID
          example: room-1
          type: string
        peers:
          description: List of all peers
          items:
            $ref: '#/components/schemas/Peer'
          type: array
      required:
        - id
        - config
        - components
        - peers
      title: Room
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Room
    RoomConfig:
      description: Room configuration
      properties:
        maxPeers:
          description: Maximum amount of peers allowed into the room
          example: 10
          minimum: 1
          nullable: true
          type: integer
        roomId:
          description: Custom id used for identifying room within Jellyfish. Must be unique across all rooms. If not provided, random UUID is generated.
          nullable: true
          type: string
        videoCodec:
          description: Enforces video codec for each peer in the room
          enum:
            - h264
            - vp8
          nullable: true
          type: string
        webhookUrl:
          description: URL where Jellyfish notifications will be sent
          example: https://backend.address.com/jellyfish-notifications-endpoint
          nullable: true
          type: string
      title: RoomConfig
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Room.Config
    RoomCreateDetailsResponse:
      description: Response containing room details
      properties:
        data:
          properties:
            jellyfish_address:
              description: Jellyfish instance address where the room was created. This might be different than the address of Jellyfish where the request was sent only when running a cluster of Jellyfishes.
              example: jellyfish1:5003
              type: string
            room:
              $ref: '#/components/schemas/Room'
          required:
            - room
            - jellyfish_address
          type: object
      required:
        - data
      title: RoomCreateDetailsResponse
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.RoomCreateDetailsResponse
    RoomDetailsResponse:
      description: Response containing room details
      properties:
        data:
          $ref: '#/components/schemas/Room'
      required:
        - data
      title: RoomDetailsResponse
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.RoomDetailsResponse
    RoomsListingResponse:
      description: Response containing list of all rooms
      properties:
        data:
          items:
            $ref: '#/components/schemas/Room'
          type: array
      required:
        - data
      title: RoomsListingResponse
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.RoomsListingResponse
    S3Credentials:
      description: An AWS S3 credential that will be used to send HLS stream. The stream will only be uploaded if credentials are provided
      properties:
        accessKeyId:
          description: An AWS access key identifier, linked to your AWS account.
          type: string
        bucket:
          description: The name of the S3 bucket where your data will be stored.
          type: string
        region:
          description: The AWS region where your bucket is located.
          type: string
        secretAccessKey:
          description: The secret key that is linked to the Access Key ID.
          type: string
      required:
        - accessKeyId
        - secretAccessKey
        - region
        - bucket
      title: S3Credentials
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Component.HLS.S3
    SubscriptionConfig:
      description: Subscription config
      properties:
        origins:
          description: List of peers and components ids whose tracks the HLS endpoint will subscribe to
          items:
            type: string
          type: array
      title: SubscriptionConfig
      type: object
      x-struct: Elixir.JellyfishWeb.ApiSpec.Subscription.Origins
  securitySchemes:
    authorization:
      scheme: bearer
      type: http
info:
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  title: Jellyfish Media Server
  version: 0.2.0
openapi: 3.0.0
paths:
  /hls/{room_id}/subscribe:
    post:
      callbacks: {}
      operationId: subscribe_hls_to
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionConfig'
        description: Subscribe configuration
        required: false
      responses:
        '201':
          description: Tracks succesfully added.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request structure
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Room doesn't exist
      summary: Subscribe the HLS component to the tracks of peers or components
      tags:
        - hls
  /hls/{room_id}/{filename}:
    get:
      callbacks: {}
      operationId: getHlsContent
      parameters:
        - description: Room id
          in: path
          name: room_id
          required: true
          schema:
            type: string
        - description: Name of the file
          in: path
          name: filename
          required: true
          schema:
            type: string
        - description: Byte range of partial segment
          in: header
          name: range
          required: false
          schema:
            type: string
        - description: Segment sequence number
          in: query
          name: _HLS_msn
          required: false
          schema:
            $ref: '#/components/schemas/HlsMsn'
        - description: Partial segment sequence number
          in: query
          name: _HLS_part
          required: false
          schema:
            $ref: '#/components/schemas/HlsPart'
        - description: Is delta manifest requested
          in: query
          name: _HLS_skip
          required: false
          schema:
            $ref: '#/components/schemas/HlsSkip'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HlsResponse'
          description: File was found
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid filename
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: File not found
      summary: Retrieve HLS Content
      tags:
        - hls
  /recording:
    get:
      callbacks: {}
      operationId: get_recordings
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordingListResponse'
          description: Success
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unable to obtain recordings
      summary: Lists all available recordings
      tags:
        - recording
  /recording/{recording_id}:
    delete:
      callbacks: {}
      operationId: delete_recording
      parameters:
        - description: Recording id
          in: path
          name: recording_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted recording
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid recording
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Recording doesn't exist
      summary: Deletes the recording
      tags:
        - recording
  /recording/{recording_id}/{filename}:
    get:
      callbacks: {}
      operationId: getRecordingContent
      parameters:
        - description: Recording id
          in: path
          name: recording_id
          required: true
          schema:
            type: string
        - description: Name of the file
          in: path
          name: filename
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HlsResponse'
          description: File was found
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: File not found
      summary: Retrieve Recording (HLS) Content
      tags:
        - recording
  /room:
    get:
      callbacks: {}
      operationId: get_all_rooms
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomsListingResponse'
          description: Success
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      summary: Show information about all rooms
      tags:
        - room
    post:
      callbacks: {}
      operationId: create_room
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomConfig'
        description: Room configuration
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomCreateDetailsResponse'
          description: Room successfully created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request structure
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
      summary: Creates a room
      tags:
        - room
  /room/{room_id}:
    delete:
      callbacks: {}
      operationId: delete_room
      parameters:
        - description: Room id
          in: path
          name: room_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted room
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Room doesn't exist
      summary: Delete the room
      tags:
        - room
    get:
      callbacks: {}
      operationId: get_room
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDetailsResponse'
          description: Success
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Room doesn't exist
      summary: Shows information about the room
      tags:
        - room
  /room/{room_id}/component:
    post:
      callbacks: {}
      operationId: add_component
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                options:
                  $ref: '#/components/schemas/ComponentOptions'
                type:
                  $ref: '#/components/schemas/ComponentType'
              required:
                - type
              type: object
        description: Component config
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentDetailsResponse'
          description: Successfully added component
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Room doesn't exist
      summary: Creates the component and adds it to the room
      tags:
        - room
  /room/{room_id}/component/{id}:
    delete:
      callbacks: {}
      operationId: delete_component
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
        - description: Component ID
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Either component or the room doesn't exist
      summary: Delete the component from the room
      tags:
        - room
  /room/{room_id}/peer:
    post:
      callbacks: {}
      operationId: add_peer
      parameters:
        - description: Room id
          in: path
          name: room_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                options:
                  $ref: '#/components/schemas/PeerOptions'
                type:
                  $ref: '#/components/schemas/PeerType'
              required:
                - type
                - options
              type: object
        description: Peer specification
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeerDetailsResponse'
          description: Peer successfully created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request body structure
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Room doesn't exist
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Peer limit has been reached
      summary: Create peer
      tags:
        - room
  /room/{room_id}/peer/{id}:
    delete:
      callbacks: {}
      operationId: delete_peer
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
        - description: Peer id
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Peer successfully deleted
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Room ID or Peer ID references a resource that doesn't exist
      summary: Delete peer
      tags:
        - room
security:
  - authorization: []
servers: []
tags: []
