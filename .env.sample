# IP and PORT an HTTP endpoint will listen to
# In Docker, JF_PORT defaults to 8080
# JF_IP=0.0.0.0
# JF_PORT=8080


# Defines how Jellyfish is seen from the outside.
# It can be in one of the following forms:
# * ip:port
# * fqdn:port
# * fqdn
# By default, it is equal to "JF_IP:JF_PORT".
JF_HOST=localhost:8080

# JF_METRICS_IP=0.0.0.0
# JF_METRICS_PORT=9568

# Defines whether to run Jellyfish in a cluster
# JF_DIST_ENABLED=false

# Node name used in a cluster.
# The first part can be any string.
# The second part has to be Jellyfish address
# it is accessible on
# JF_NODE_NAME=jellyfish1@127.0.0.1

# Used for grouping Jellyfishes in a cluster
# JF_COOKIE=jellyfishclustercookie

# List of other Jellyfishes we should try to connect to form a cluster
# JF_NODES="jellyfish2@127.0.0.1 jellyfish3@127.0.0.1"

# Token used for authorizing HTTP requests
JF_SERVER_API_TOKEN=jellyfish_docker_token

# Used by the server e.g. to create client tokens.
# If not set, it will be generated.
# JF_SECRET_KEY_BASE=super-secret-key

# Decide if jellyfish will check origin of requests
# JF_CHECK_ORIGIN=true

# Where Jellyfish should save its artifacts
# You can get access to this directory e.g. by mounting 
# a volume with:
#
#   -v $(pwd)/jellyfish_output:/app/jellyfish_output 
#
# JF_OUTPUT_BASE_PATH=/app/jellyfish_output


# WEBRTC ENVS

# true, if WebRTC peers are used
JF_WEBRTC_USED=true

# TURN default configuration
# note: loopback address as INTEGRATED_TURN_IP cannot be used inside a Docker container
# note: when running locally, JF_INTEGRATED_TURN_IP can be your private ip address 
JF_INTEGRATED_TURN_IP=<your_public_ip_address>
JF_INTEGRATED_TURN_LISTEN_IP=0.0.0.0
JF_INTEGRATED_TURN_PORT_RANGE=50000-50050
