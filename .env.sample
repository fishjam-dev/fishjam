# IP and PORT an HTTP endpoint will listen to
# In Docker, JF_PORT defaults to 8080
# JF_IP=0.0.0.0
# JF_PORT=8080


# Defines how Jellyfish is seen from the outside.
# It can be in one of the following forms:
# * ip:port
# * fqdn:port
# * fqdn
# By default, it is equal to "JF_IP:JF_PORT".
JF_HOST=localhost:8080

# JF_METRICS_IP=0.0.0.0
# JF_METRICS_PORT=9568

# Defines whether to run Jellyfish in a cluster
# JF_DIST_ENABLED=false

# Node name used in a cluster.
# It consists of two parts - nodename@hostname.
# The first part identifies a node on a single machine and can
# be any string.
# The second part identifies the host machine and has to be an 
# ip address or FQDN of a machine Jellyfish runs on.
# If you run a cluster on a single machine or in the same docker network
# and you don't want to use ip addresses or FQDN as hostnames, 
# you can use short names (see JF_DIST_MODE).
# JF_DIST_NODE_NAME=jellyfish1@127.0.0.1

# Distribution mode - can be `name` or `sname`.
# When using `name`, your hostname has to be 
# an ip address or FQDN of a machine Jellyfish runs on.
# When using `sname`, your hostname can be any string
# See our docker-compose.yaml, which we use in our
# integration tests for an example.
# JF_DIST_MODE=name

# Used for grouping Jellyfishes in a cluster
# Use different cookies when you want to form 
# multiple clusters running on shared machines.
# JF_DIST_COOKIE=jellyfish_cookie

# List of other Jellyfishes we should try to connect to form a cluster
# JF_DIST_NODES="jellyfish2@127.0.0.1 jellyfish3@127.0.0.1"

# Ports used by Jellyfish when forming a cluster.
# Besides them, Jellyfish also uses one more service
# called EPMD, which uses port 4369.
# Note: those variables only take an effect in docker or
# after doing `mix release`.
# JF_DIST_MIN_PORT=9000
# JF_DIST_MAX_PORT=9000

# Token used for authorizing HTTP requests
JF_SERVER_API_TOKEN=jellyfish_docker_token

# Used by the server e.g. to create client tokens.
# If not set, it will be generated.
# JF_SECRET_KEY_BASE=super-secret-key

# Decide if jellyfish will check origin of requests
# JF_CHECK_ORIGIN=true

# Where Jellyfish should save its artifacts
# You can get access to this directory e.g. by mounting 
# a volume with:
#
#   -v $(pwd)/jellyfish_output:/app/jellyfish_output 
#
# JF_OUTPUT_BASE_PATH=/app/jellyfish_output


# WEBRTC ENVS

# true, if WebRTC peers are used
JF_WEBRTC_USED=true

# TURN default configuration
# note: loopback address as INTEGRATED_TURN_IP cannot be used inside a Docker container
# note: when running locally, JF_WEBRTC_TURN_IP can be your private ip address 
JF_WEBRTC_TURN_IP=<your_public_ip_address>
JF_WEBRTC_TURN_LISTEN_IP=0.0.0.0
JF_WEBRTC_TURN_PORT_RANGE=50000-50050
